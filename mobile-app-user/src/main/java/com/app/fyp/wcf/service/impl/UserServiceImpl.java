package com.app.fyp.wcf.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.app.fyp.wcf.exception.UserServiceException;
import com.app.fyp.wcf.io.entity.UserEntity;
import com.app.fyp.wcf.io.repositories.UserRepository;
import com.app.fyp.wcf.service.UserService;
import com.app.fyp.wcf.shared.Utils;
import com.app.fyp.wcf.shared.dto.UserDto;
import com.app.fyp.wcf.ui.model.response.ErrorMessages;

@Service
public class UserServiceImpl implements UserService {

	// it implements all the functions that are mentioned in the service class

	@Autowired
	UserRepository userRepository;

	@Autowired
	Utils utils;

	@Autowired
	BCryptPasswordEncoder bCryptPasswordEncoder;

	@Override
	public UserDto createUser(UserDto user) {

		if (userRepository.findByEmail(user.getEmail()) != null)
			throw new RuntimeException("Email already exists");
		// to check whether the data already exists or not (authentication)

		else if (userRepository.findByPhoneNumber(user.getPhoneNumber()) != null)
			throw new RuntimeException("Phone Number already exists");
		// to check whether the data already exists or not (authentication)

		else if (userRepository.findByCnicNumber(user.getCnicNumber()) != null)
			throw new RuntimeException("CNIC number already exists");
		// to check whether the data already exists or not (authentication)

		UserEntity userEntity = new UserEntity();
		BeanUtils.copyProperties(user, userEntity);

		userEntity.setEncryptedPassword(bCryptPasswordEncoder.encode(user.getPassword()));// to encrypt user password

		String PublicUserId = utils.generateUserId(30);// user id will automatically generated by this function in Utils
														// class
		userEntity.setUserId(PublicUserId);

		UserEntity storedUserDetails = userRepository.save(userEntity);

		UserDto returnValue = new UserDto();
		BeanUtils.copyProperties(storedUserDetails, returnValue);

		return returnValue;
	}

	@Override
	public UserDto getUser(String email) {

		UserEntity userEntity = userRepository.findByEmail(email);

		if (userEntity == null)
			throw new UsernameNotFoundException(email);

		UserDto returnValue = new UserDto();
		BeanUtils.copyProperties(userEntity, returnValue);

		return returnValue;

	}

	// for user sign in
	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		UserEntity userEntity = userRepository.findByEmail(email);

		if (userEntity == null)
			throw new UsernameNotFoundException(email);

		return new User(userEntity.getEmail(), userEntity.getEncryptedPassword(), new ArrayList<>());

	}

	@Override
	public UserDto getUserByUserId(String userId) {
		UserDto returnValue = new UserDto();
		UserEntity userEntity = userRepository.findByUserId(userId);

		if (userEntity == null) // exception handling
			throw new UsernameNotFoundException("user with ID "+userId+" not found");
		// customized exception by using UserServiceException class and ErrorMessages
		// erum

		BeanUtils.copyProperties(userEntity, returnValue);

		return returnValue;
	}

	@Override
	public UserDto updateUser(String userId, UserDto user) {
		UserDto returnValue = new UserDto();
		UserEntity userEntity = userRepository.findByUserId(userId);

		if (userEntity == null)
			throw new UserServiceException(ErrorMessages.NO_RECORD_FOUND.getErrorMessage());

		userEntity.setFullName(user.getFullName());
		// here we can also implement some business logics to check whether the userDto
		// is empty or not also here we can update as many parameters as we want its
		// upto you like here I am just updating my full name parameter while I can
		// update all the parameters or a few of them just according to the need of the
		// app and the according to the need of the user
		
		UserEntity updatedUserDetails=userRepository.save(userEntity);
		
		BeanUtils.copyProperties(updatedUserDetails, returnValue);
		
		return returnValue;
	}

	@Override
	public void deleteUser(String userId) {

		UserEntity userEntity = userRepository.findByUserId(userId);
		//here we are fetching data from the data base according to the given id

		if (userEntity == null)
			throw new UserServiceException(ErrorMessages.NO_RECORD_FOUND.getErrorMessage());
		//here we are checking that the user exist in the data base or not 
		
		userRepository.delete(userEntity);
		
	}

	@Override
	public List<UserDto> getUsers(int page, int limit) {
		
		List<UserDto> returnValue=new ArrayList<>();
		//to returnValues back to the call we have created the list or userDto
		
		if(page>0) {
			page=page-1; 
		}
		
		//we are doing this just for our help i mean as someHow 
		//we just forget about the index number of the list 
	//that starts from the 0 and we put 1 there that will cause an error
		//for us so here we just did a litle hard coding to save our self from errors
		
		Pageable pageableRequest=PageRequest.of(page, limit);
		//created this PageAble as an parameter that contains the numbers of pages and 
		//the limit of that page and this parameter will be passed in the findAll() function
		
		Page<UserEntity> usersPage=userRepository.findAll(pageableRequest);
		//we created a list like page which is of type userEntity to save the values that will return back from the userRepository()
		
		List<UserEntity> users=usersPage.getContent();
		//created the list to fetch all the data that came from the userRepository() in the variable named users
		
		
		//also created this loop below just to shift data from the list that is of type UserEntity into a list of type UserDto
		for(UserEntity userEntity:users) {
			UserDto userDto=new UserDto();
			BeanUtils.copyProperties(userEntity, userDto);
			returnValue.add(userDto);
		}
		
		return returnValue;
	}

}
